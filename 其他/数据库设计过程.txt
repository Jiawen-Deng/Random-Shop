关闭外键约束：
在开始创建或修改表之前，脚本首先关闭了外键约束（PRAGMA foreign_keys = false;）。这是为了防止在创建或删除表时，由于外键的存在而导致的潜在错误。

创建商品表（Goods）：

使用DROP TABLE IF EXISTS语句来确保如果Goods表已经存在，则删除它。
使用CREATE TABLE语句创建一个新的Goods表，包含以下列：
GID：主键，自动递增的整数。
GName：商品名称，文本类型。
GDesc：商品描述，文本类型。
GValue：商品价值，整数类型。
GPic：商品图片路径，文本类型。
GShelf：商品是否上架，整数类型，默认值为0（未上架）。
GState：商品状态，实数类型，默认值为0（可能表示正常状态）。
插入商品表记录：

使用INSERT INTO语句向Goods表中插入一条测试数据。
创建订单表（Order）：

使用DROP TABLE IF EXISTS语句来确保如果Order表已经存在，则删除它。
使用CREATE TABLE语句创建一个新的Order表，包含以下列：
OID：主键，自动递增的整数。
GID：外键，关联到Goods表的GID。
ODesc：订单描述，文本类型。
OState：订单状态，整数类型，默认值为0（可能表示未处理状态）。
插入订单表记录：

使用INSERT INTO语句向Order表中插入三条订单数据。
创建卖家表（Seller）：

使用DROP TABLE IF EXISTS语句来确保如果Seller表已经存在，则删除它。
使用CREATE TABLE语句创建一个新的Seller表，包含以下列：
SAccount：卖家账号，作为主键。
SPassword：卖家密码。
插入卖家表记录：

使用INSERT INTO语句向Seller表中插入一条卖家数据。
创建sqlite_sequence表：

SQLite使用sqlite_sequence表来跟踪自增ID的当前值。这个表通常由数据库系统自动管理，但在这个脚本中，它被显式创建并插入了初始值。
插入了两条记录，分别设置了Goods和Order表的自增ID的起始值。
更新自增ID值：

使用UPDATE语句更新sqlite_sequence表中Goods和Order的自增ID值，以确保它们与插入的数据一致。
开启外键约束：

在所有表创建和数据插入完成后，脚本重新开启了外键约束（PRAGMA foreign_keys = true;）。